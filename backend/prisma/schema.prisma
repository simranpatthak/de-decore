generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String?
  email      String    @unique
  password   String?
  phone      String?
  avatar     String?
  provider   String? // "google" ya null (agar normal email signup hua ho)
  providerId String? // Google UID
  addresses  Address[]
  orders     Order[]
  payments   Payment[]
  reviews    Review[]
  role       Role      @default(USER)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Cart       Cart[]
}

model Address {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  street    String
  city      String
  state     String
  country   String
  zip       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int         @default(0)
  discount    Float? // Can be null
  reviews     Review[]
  orderItems  OrderItem[]
  images      Image[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Cart        Cart[]
}

model Service {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  addOns      String[] // User selectable add-ons
  price       Float? // Default "Call for pricing" (null means no price)
  reviews     Review[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Cart        Cart[]
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  isPrimary Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int?
  serviceId Int?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, serviceId])
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId Int?
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  items         OrderItem[]
  totalAmount   Float
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Payment       Payment[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId Int?
  quantity  Int
  price     Float
}

model Payment {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       Int
  amount        Float
  status        PaymentStatus @default(PENDING)
  transactionId String? // Store Payment Gateway Transaction ID
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum Role {
  USER
  ADMIN
}
